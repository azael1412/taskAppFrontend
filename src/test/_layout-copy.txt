import {
  DrawerHeader,
  Main,
  PersistentDrawer,
} from '@/components/PersistentDrawerLeft'
import { USER_EXPIRES_IN, USER_KEY } from '@/constants'

import { AppStore } from '@/store'
import { logout, login } from '@/store/reducers/auth'
import {
  getItemLocalStorage,
  isAuthenticated,
  removeItemLocalStorage,
  setItemLocalStorage,
} from '@/utils'

import { Box } from '@mui/material'
import {
  createFileRoute,
  Outlet,
  redirect,
  useLocation,
} from '@tanstack/react-router'
import axios, { AxiosError } from 'axios'
import { useDispatch, useSelector } from 'react-redux'
import { Auth as AuthState } from '../store/models/auth'
import { useEffect } from 'react'
import { me, refreshToken } from '@/services'

export const Route = createFileRoute('/protected/_layout copy')({
  beforeLoad: async () => {
    const isLogged = isAuthenticated()
    console.log({ isLogged })
    if (!isLogged) {
      throw redirect({ to: '/' })
    }
  },
  component: Layout,
})

function Layout() {
  const open = useSelector((state: AppStore) => state.ui.isMenuOpen)
  const dispatch = useDispatch()
  const location = useLocation()

  useEffect(() => {
    const checkAuthAndRefreshToken = async () => {
      const token = getItemLocalStorage(USER_KEY)
      const expiresAt = getItemLocalStorage(USER_EXPIRES_IN)
      const currentDate = new Date()

      if (token && expiresAt) {
        try {
          const currentTokenDate = new Date(expiresAt)
          const timeRemaining =
            currentTokenDate.getTime() - currentDate.getTime() // Diferencia en milisegundos
          const minutesRemaining = timeRemaining / (1000 * 60) // Convertir a minutos
          //console.log({minutosRestantes, currentTokenDate,currentDate })
          if (minutesRemaining <= 0) {
            throw new Error('El token ha caducado.')
          } else if (minutesRemaining <= 20) {
            // Realiza la petición para obtener un nuevo token cuando faltan 20 minutos o menos para que caduque
            const resp = await refreshToken()

            setItemLocalStorage(USER_KEY, resp.results.access_token)
            setItemLocalStorage(USER_EXPIRES_IN, resp.results.expires_in)
            const auth: AuthState = {
              user: resp.results.user,
              isAuthenticated: true,
            }
            dispatch(login(auth))
          } else {
            //if(auth.user === null) {
            //hacer petición pa ver la info del usuario autenticado
            const resp = await me()
            const auth: AuthState = {
              user: resp.results,
              isAuthenticated: true,
            }
            dispatch(login(auth))
            //}
            // Si quedan más de 20 minutos, no se hace nada.
            //console.log('Quedan más de 20 minutos para que el token caduque. No se realizará ninguna acción.');
          }
        } catch (error) {
          if (axios.isAxiosError(error)) {
            const axiosError = error as AxiosError

            if (axiosError.response) {
              console.log(axiosError.response.data)
              console.log(axiosError.response.status)
              console.log(axiosError.response.headers)
            } else if (axiosError.request) {
              console.log(axiosError.request)
            } else {
              console.log('Error', axiosError.message)
            }
          } else {
            console.log('Error desconocido:', error)
          }

          removeItemLocalStorage(USER_KEY)
          removeItemLocalStorage(USER_EXPIRES_IN)
          dispatch(logout())
        }
      }
    }

    checkAuthAndRefreshToken()
  }, [dispatch, location])
  return (
    <Box sx={{ display: 'flex' }}>
      <PersistentDrawer />
      <Main open={open} sx={{ overflowX: 'auto' }}>
        <DrawerHeader />
        <Outlet />
      </Main>
    </Box>
  )
}
